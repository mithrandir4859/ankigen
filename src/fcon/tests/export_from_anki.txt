/2022 Dec 21, 22:44 4158/	How do we use FHIR currently in Kate in Cerner integrations?	"We call FHIR to retrieve fhir patient id, fhir encounter id. We do that right after parsing, because it is the earliest moment when we have enough data to perform the necessary FHIR calls. We call FHIR in a separate thread and store results into mongo in order to not block further message processing (tagging, fx, etc).<br><br><b>See this:</b><br><div><pre><span style=""color:#0033b3;"">if </span><span style=""color:#94558d;"">self</span>.flag_manager.is_epic_env:<br>    <span style=""color:#94558d;"">self</span>.fhir_ids_retriever = Singleton(EpicIdsRetriever, <span style=""color:#94558d;"">self</span>.cerner_notification_service)<br><span style=""color:#0033b3;"">else</span>:<br>    <span style=""color:#94558d;"">self</span>.fhir_ids_retriever = Singleton(<br>        CernerIdsRetriever, <span style=""color:#94558d;"">self</span>.cerner_notification_service,<br>        <span style=""color:#660099;"">hospitals_to_ignore</span>=<span style=""color:#94558d;"">self</span>.flag_manager.do_not_preretrieve_external_ids_for<br>    )</pre><pre><b><span style=""font-family: Arial;"">Also this:</span></b><br></pre><pre><pre><span style=""color:#9e880d;"">@wrap_into_list<br></span><span style=""color:#0033b3;"">def </span><span style=""color:#00627a;"">_get_transformers</span>(<span style=""color:#94558d;"">self</span>, pretagging, posttagging):<br>    <span style=""color:#0033b3;"">yield from </span>pretagging<br>    <span style=""color:#0033b3;"">if </span><span style=""color:#94558d;"">self</span>.ffm.use_fhir_ids_retriever:<br>        <span style=""color:#0033b3;"">yield </span><span style=""color:#94558d;"">self</span>.common_di.fhir_ids_retriever<br>    <span style=""color:#0033b3;"">if </span><span style=""color:#94558d;"">self</span>.ffm.post_kate_readiness_asap:<br>        <span style=""color:#0033b3;"">yield </span>Singleton(<br>            KateReadinessAsapPoster, <span style=""color:#94558d;"">self</span>.common_di.cerner_notification_service<br>        )</pre><pre><b>Also this:</b></pre><pre><div><pre><span style=""color:#0033b3;"">def </span><span style=""color:#00627a;"">_handle_mappings_in_another_thread_if_necessary</span>(<span style=""color:#94558d;"">self</span>, external_ids, hospital):<br>    external_ids_copy = ExternalIds(**<span style=""color:#000080;"">dict</span>(external_ids.to_mongo()))<br>    external_ids_copy.hospital = hospital<br>    thread = Thread(<span style=""color:#660099;"">target</span>=<span style=""color:#94558d;"">self</span>.handle_mappings, <span style=""color:#660099;"">args</span>=(external_ids_copy,))<br>    thread.start()<br></pre></div></pre></pre></div>"
/2022 Dec 22, 01:02 1153/	Assuming we will make on average at least 3 data fhir calls per encounter, should we process each response individually or together?	The question may be rephrased as: should we parse, tag, fx each response separately and then merge the data together or should we merge the data before parsing?<br><br>Different FHIR endpoints would return different data which will require different parsing,<br>tagging, feature extraction, so it is only natural that processing of various responses would be set up differently and will happen individually.
/2022 Dec 24, 02:47 4543/	What is the limit when it comes to processing each FHIR response individually? What if we know for sure that data from a certain FHIR endpoint alone will never be sufficient to trigger a meaningful prediction?	__TLDR__: allow arbitrary grouping of FHIR calls into so-called `FhirCallsTrigger`s.<br><br>Such a question may seriously arise in some later implementations. Currently we expect that we will receive significant amount of data in hl7 and adding the data from FHIR (most notably, reason for visit) may easily trigger the prediction together with hl7 data.<br><br>Processing each FHIR response individually also makes great sense if we will be forced to call FHIR each N seconds to check whether some fresh data has become available.<br><br>We are also not really forced to make each and every fhir call its own decision. We may arbitrarily group fhir calls if the need arises. Such a group may be called `FhirCallsTrigger`. Right now each hl7 message is a decision trigger (talking conceptually now, there is no such class in the code). Now we would introduce decision triggers that fetch data from fhir. Second-order notifications may also be conceptualized and/or refactored as decision triggers.